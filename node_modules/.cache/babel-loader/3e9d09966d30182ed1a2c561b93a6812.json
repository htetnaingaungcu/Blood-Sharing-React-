{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/UserBloodRequest/UserBloodRequest.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport firebase from '../../../utilites/firebase';\nimport { connect } from 'react-redux';\nimport { fetchRequestByUID, fetchBloodRequests, fetchDonorList } from '../../../actions/bloodRequestActions';\nimport UserBloodRequestList from '../../presentional/UserBloodRequestList';\nimport DonorList from '../../presentional/DonorList';\n\nclass UserBloodRequest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.fetchBloodRequests();\n    this.state = {\n      donors: []\n    };\n  }\n\n  render() {\n    const uid = this.props.currentUser.uid;\n    const requestList = this.props.bloodRequests;\n    const request = requestList.find(item => item.uid == uid);\n\n    if (request != undefined) {\n      if (this.state.donors.length == 0) {\n        const getDonor = firebase.firestore().collection('Request_User').doc(request.id).collection('Donor').get();\n        getDonor.then(snapshot => {\n          const donors = [];\n          snapshot.docs.forEach(doc => {\n            const donor = doc.data();\n            donors.push(donor);\n          });\n          this.setState({\n            donors\n          });\n        });\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(UserBloodRequestList, {\n        userRequest: request,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Donor Lists\"), this.state.donors.map((donor, index) => React.createElement(DonorList, {\n        key: index,\n        donor: donor,\n        requestUid: request.uid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"No Request\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.currentUser,\n  bloodRequests: state.bloodRequests\n});\n\nconst mapDispatchToProps = {\n  fetchBloodRequests\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserBloodRequest);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/UserBloodRequest/UserBloodRequest.js"],"names":["React","BrowserRouter","Router","Route","Link","Redirect","firebase","connect","fetchRequestByUID","fetchBloodRequests","fetchDonorList","UserBloodRequestList","DonorList","UserBloodRequest","Component","constructor","props","state","donors","render","uid","currentUser","requestList","bloodRequests","request","find","item","undefined","length","getDonor","firestore","collection","doc","id","get","then","snapshot","docs","forEach","donor","data","push","setState","map","index","mapStateToProps","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAKC,MAA3B,EAAmCC,KAAnC,EAA0CC,IAA1C,EAA+CC,QAA/C,QAA+D,kBAA/D;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EAA2BC,kBAA3B,EAA+CC,cAA/C,QAAqE,sCAArE;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;AACA,OAAOC,SAAP,MAAsB,8BAAtB;;AAEA,MAAMC,gBAAN,SAA+Bb,KAAK,CAACc,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKA,KAAL,CAAWP,kBAAX;AACA,SAAKQ,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,GAAG,GAAG,KAAKJ,KAAL,CAAWK,WAAX,CAAuBD,GAAnC;AACA,UAAME,WAAW,GAAG,KAAKN,KAAL,CAAWO,aAA/B;AACA,UAAMC,OAAO,GAAGF,WAAW,CAACG,IAAZ,CAAkBC,IAAI,IAAIA,IAAI,CAACN,GAAL,IAAYA,GAAtC,CAAhB;;AAEA,QAAGI,OAAO,IAAIG,SAAd,EAAyB;AACrB,UAAI,KAAKV,KAAL,CAAWC,MAAX,CAAkBU,MAAlB,IAA4B,CAAhC,EAAmC;AAC/B,cAAMC,QAAQ,GAAGvB,QAAQ,CAACwB,SAAT,GAAqBC,UAArB,CAAgC,cAAhC,EAAgDC,GAAhD,CAAoDR,OAAO,CAACS,EAA5D,EAAgEF,UAAhE,CAA2E,OAA3E,EAAoFG,GAApF,EAAjB;AAEAL,QAAAA,QAAQ,CAACM,IAAT,CAAeC,QAAQ,IAAI;AACvB,gBAAMlB,MAAM,GAAG,EAAf;AACAkB,UAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAuBN,GAAG,IAAI;AAC1B,kBAAMO,KAAK,GAAGP,GAAG,CAACQ,IAAJ,EAAd;AACAtB,YAAAA,MAAM,CAACuB,IAAP,CAAYF,KAAZ;AACH,WAHD;AAIA,eAAKG,QAAL,CAAc;AAAExB,YAAAA;AAAF,WAAd;AACH,SAPD;AAQH;;AAED,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,oBAAD;AAAsB,QAAA,WAAW,EAAEM,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHJ,EAKQ,KAAKP,KAAL,CAAWC,MAAX,CAAkByB,GAAlB,CAAsB,CAACJ,KAAD,EAAQK,KAAR,KAClB,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEA,KAAhB;AAAuB,QAAA,KAAK,EAAEL,KAA9B;AAAqC,QAAA,UAAU,EAAEf,OAAO,CAACJ,GAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALR,CADJ;AAcH,KA5BD,MA6BI;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ;AAGH;AAEJ;;AA/C0C;;AAkD/C,MAAMyB,eAAe,GAAG5B,KAAK,KAAK;AAC9BI,EAAAA,WAAW,EAAGJ,KAAK,CAACI,WADU;AAE9BE,EAAAA,aAAa,EAAEN,KAAK,CAACM;AAFS,CAAL,CAA7B;;AAKE,MAAMuB,kBAAkB,GAAG;AACzBrC,EAAAA;AADyB,CAA3B;AAIA,eAAeF,OAAO,CAACsC,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CjC,gBAA5C,CAAf","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as  Router, Route, Link,Redirect } from \"react-router-dom\";\nimport firebase from '../../../utilites/firebase';\n\nimport { connect } from 'react-redux';\nimport { fetchRequestByUID,fetchBloodRequests, fetchDonorList } from '../../../actions/bloodRequestActions';\nimport UserBloodRequestList from '../../presentional/UserBloodRequestList';\nimport DonorList from '../../presentional/DonorList';\n\nclass UserBloodRequest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.fetchBloodRequests();\n        this.state = { donors: [] };\n    }\n\n    render() {\n        const uid = this.props.currentUser.uid;\n        const requestList = this.props.bloodRequests;\n        const request = requestList.find( item => item.uid == uid); \n\n        if(request != undefined) {\n            if (this.state.donors.length == 0) {\n                const getDonor = firebase.firestore().collection('Request_User').doc(request.id).collection('Donor').get();\n                \n                getDonor.then( snapshot => {\n                    const donors = [];\n                    snapshot.docs.forEach( doc => {\n                        const donor = doc.data();\n                        donors.push(donor);                       \n                    })\n                    this.setState({ donors });\n                })  \n            }\n\n            return (\n                <React.Fragment>\n                    <UserBloodRequestList userRequest={request}/>\n\n                    <h3>Donor Lists</h3> \n                    {\n                        this.state.donors.map((donor, index) => (\n                            <DonorList key={index} donor={donor} requestUid={request.uid}/>\n                        ))\n                    }\n                   \n                </React.Fragment>\n            )\n            \n        }\n        else{\n            return (\n                <p>No Request</p>\n            )\n        }\n               \n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUser : state.currentUser,\n    bloodRequests: state.bloodRequests,\n  });\n  \n  const mapDispatchToProps = {\n    fetchBloodRequests,\n  }\n  \n  export default connect(mapStateToProps,mapDispatchToProps)(UserBloodRequest);"]},"metadata":{},"sourceType":"module"}