{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/MessagePage/MessagePage.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport firebase from \"../../../utilities/firebase\";\nimport { connect } from 'react-redux';\nimport './MessagePage.css';\nimport NewMessageForm from \"../NewMessageForm\";\nimport ImageUpload from \"../ImageUpload\";\nimport MessageItem from \"../../presentional/MessageItem\";\nimport TypingIndicator from \"../../presentional/TypingIndicator\";\nconst firestore = firebase.firestore();\n\nclass MessagePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.state = {\n      messages: [],\n      settings: []\n    };\n    const uids = this.props.match.params.id; // Create Message Conversation\n\n    firestore.collection('Chat_Room').doc(uids).get().then(chat => {\n      const chatRoom = chat.data();\n\n      if (chatRoom == \"undefined\") {\n        const chatRoom = {\n          roomId: uids,\n          roomName: \"Blood Sharing Group\",\n          updateAt: new Date()\n        };\n        firebase.firestore().collection('Chat_Room').doc(uids).set(chatRoom);\n      } else {\n        firebase.firestore().collection('Chat_Room').doc(uids).collection('Message').onSnapshot(snapshot => {\n          const messages = [];\n          snapshot.docs.forEach(item => {\n            const message = item.data();\n            message.id = item.id;\n            messages.push(message); //console.log('messages Arr',messages)\n          });\n          messages.sort((a, b) => {\n            return a.sendAt.seconds > b.sendAt.seconds ? 1 : -1;\n          });\n          this.setState({\n            messages: messages\n          });\n        });\n        firestore.collection('setting').onSnapshot(snapshot => {\n          const settings = [];\n          snapshot.docs.forEach(item => {\n            const setting = item.data();\n            setting.id = item.id;\n            settings[setting.id] = setting;\n          });\n          this.setState({\n            settings: settings\n          });\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    }); //console.log(\"state mess\", this.state.messages)\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    const is_typing = this.state.settings['typing'] && this.state.settings['typing'].status;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messagesHolder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.messages.map(item => React.createElement(MessageItem, {\n      key: item.id,\n      message: item,\n      ownmessage: item.uid == \"sMdnzobCrvWx0UMCtfduCqRmjWR2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"messageEnd\",\n      ref: el => {\n        this.messagesEnd = el;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), is_typing && this.state.new_message === '' && React.createElement(TypingIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(NewMessageForm, {\n      messageId: this.props.match.params.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(ImageUpload, {\n      messageId: this.props.match.params.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.currentUser\n});\n\nexport default connect(mapStateToProps)(MessagePage);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/MessagePage/MessagePage.js"],"names":["React","BrowserRouter","Router","Route","Link","Redirect","firebase","connect","NewMessageForm","ImageUpload","MessageItem","TypingIndicator","firestore","MessagePage","Component","constructor","props","scrollToBottom","messagesEnd","scrollIntoView","behavior","state","messages","settings","uids","match","params","id","collection","doc","get","then","chat","chatRoom","data","roomId","roomName","updateAt","Date","set","onSnapshot","snapshot","docs","forEach","item","message","push","sort","a","b","sendAt","seconds","setState","setting","catch","err","console","log","componentDidMount","componentDidUpdate","render","is_typing","status","map","uid","el","new_message","mapStateToProps","user","currentUser"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as  Router, Route, Link,Redirect } from \"react-router-dom\";\nimport firebase from \"../../../utilities/firebase\";\nimport { connect } from 'react-redux';\n\nimport './MessagePage.css';\nimport NewMessageForm from \"../NewMessageForm\";\nimport ImageUpload from \"../ImageUpload\";\nimport MessageItem from \"../../presentional/MessageItem\";\nimport TypingIndicator from \"../../presentional/TypingIndicator\";\n\nconst firestore = firebase.firestore();\n\nclass MessagePage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            settings: [],\n        }\n\n        const uids = this.props.match.params.id;\n\n        // Create Message Conversation\n        firestore.collection('Chat_Room').doc(uids).get()\n        .then( (chat) => {\n            const chatRoom = chat.data()\n\n            if(chatRoom == \"undefined\") {\n                const chatRoom = {\n                    roomId: uids,\n                    roomName: \"Blood Sharing Group\",\n                    updateAt: new Date()\n                }\n                firebase.firestore().collection('Chat_Room').doc(uids).set(chatRoom);\n            }\n            else{\n                firebase.firestore().collection('Chat_Room').doc(uids).collection('Message').onSnapshot(snapshot => {\n                    const messages = [];\n                    snapshot.docs.forEach(item => {\n                        const message = item.data();\n                        message.id = item.id;\n                        messages.push(message);\n                        //console.log('messages Arr',messages)\n                    })\n                    messages.sort(\n                      (a, b) => { return (a.sendAt.seconds > b.sendAt.seconds) ? 1 : -1 }\n                    );\n              \n                    this.setState({\n                      messages: messages\n                    })\n                })\n        \n                firestore.collection('setting').onSnapshot(snapshot => {\n                    const settings = [];\n                    snapshot.docs.forEach(item => {\n                      const setting = item.data();\n                      setting.id = item.id;\n                      settings[setting.id] = setting;\n                    })\n                    this.setState({\n                      settings: settings\n                    })\n                });\n            }\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n        //console.log(\"state mess\", this.state.messages)\n\n    }\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n    \n    componentDidMount() {\n        this.scrollToBottom();\n    }\n      \n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    render() {\n        const is_typing = this.state.settings['typing'] && this.state.settings['typing'].status;\n        \n        return (\n            <React.Fragment>\n                {/* {!this.props.user && <Redirect to=\"/login\"/>} */}\n                <div className=\"messagesHolder\">\n                    {this.state.messages.map(item => (\n                        <MessageItem key={item.id} message={item} ownmessage = {item.uid == \"sMdnzobCrvWx0UMCtfduCqRmjWR2\"} />\n                    ))}\n                    <div id=\"messageEnd\" ref={(el) => { this.messagesEnd = el; }}></div>\n                </div>\n\n                {is_typing && (this.state.new_message === '') && (\n                    <TypingIndicator></TypingIndicator>\n                )\n                }\n                \n                <React.Fragment>\n                    <NewMessageForm messageId={this.props.match.params.id}></NewMessageForm>\n                    <ImageUpload messageId={this.props.match.params.id}></ImageUpload>\n                </React.Fragment>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.currentUser,\n})\n  \nexport default connect(mapStateToProps)(MessagePage);"]},"metadata":{},"sourceType":"module"}