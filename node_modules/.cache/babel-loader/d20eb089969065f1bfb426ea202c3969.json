{"ast":null,"code":"import { retrieveData, storeData } from \"../utilites/localStorage\";\nimport firebase from '../utilites/firebase';\nexport const fetchBloodRequests = () => dispatch => {\n  const bloodRequests = [];\n  const getRequests = firebase.firestore().collection('Request_User').get();\n  getRequests.then(snapshot => {\n    snapshot.docs.forEach(item => {\n      const request = item.data();\n      request.id = item.id;\n      bloodRequests.push(request);\n    });\n    dispatch({\n      type: 'FETCH_REQUEST',\n      data: bloodRequests\n    });\n  });\n};\nexport const fetchRequestByBloodType = bloodType => dispatch => {\n  const bloodRequests = [];\n  firebase.firestore().collection('Request_User').where('bloodType', '==', bloodType).get().then(snapshot => {\n    snapshot.docs.forEach(item => {\n      const request = item.data();\n      request.id = item.id;\n      bloodRequests.push(request);\n    });\n    dispatch({\n      type: 'FETCH_ALL_REQUEST',\n      data: bloodRequests\n    });\n  });\n};\nexport const fetchRequestByUID = uid => dispatch => {\n  firebase.firestore().collection('Request_User').where('uid', '==', uid).get().then(snapshot => {\n    snapshot.docs.forEach(item => {\n      const request = item.data();\n      dispatch({\n        type: 'FETCH_REQUEST_BY_UID',\n        data: request\n      });\n    });\n  });\n};\nexport const insertBloodRequest = bloodRequest => dispatch => {\n  firebase.firestore().collection('Request_User').add(bloodRequest).then(data => {\n    bloodRequest.id = data.id;\n    dispatch({\n      type: 'ADD_NEW_BLOOD_REQUEST',\n      data: bloodRequest\n    });\n  });\n};\nexport const insertDonorList = (request_id, user_id, userData) => dispatch => {\n  firebase.firestore().collection('Request_User').doc(request_id).collection('Donor').doc(user_id).set(userData).then(data => {\n    console.log(data);\n    dispatch({\n      type: 'ADD_DONOR_LIST',\n      data: userData\n    });\n  });\n};\nexport const fetchByUID = uid => dispatch => {\n  firebase.firestore().collection('Request_User').where('uid', '==', uid).get().then(snapshot => {\n    const request = snapshot.docs;\n    dispatch({\n      type: 'FETCH_REQUEST_BY_UID',\n      data: request\n    });\n  });\n};\nexport const fetchDonorList = request_id => dispatch => {\n  const donors = [];\n  firebase.firestore().collection('Request_User').doc(request_id).collection('Donor').get().then(subCollectionDocs => {\n    subCollectionDocs.docs.forEach(doc => {\n      const donor_id = doc.id;\n      const donor = doc.data();\n      donors.push(donor);\n    });\n    dispatch({\n      type: 'FETCH_DONOR_LIST',\n      data: donors\n    });\n  });\n};","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/actions/bloodRequestActions.js"],"names":["retrieveData","storeData","firebase","fetchBloodRequests","dispatch","bloodRequests","getRequests","firestore","collection","get","then","snapshot","docs","forEach","item","request","data","id","push","type","fetchRequestByBloodType","bloodType","where","fetchRequestByUID","uid","insertBloodRequest","bloodRequest","add","insertDonorList","request_id","user_id","userData","doc","set","console","log","fetchByUID","fetchDonorList","donors","subCollectionDocs","donor_id","donor"],"mappings":"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","sourcesContent":["import {retrieveData,storeData} from \"../utilites/localStorage\";\nimport firebase from '../utilites/firebase';\n\nexport const fetchBloodRequests = () => dispatch => {\n  const bloodRequests = [];\n  const getRequests = firebase.firestore().collection('Request_User').get();\n\n  getRequests.then( (snapshot) => {\n    snapshot.docs.forEach( item => {\n        const request = item.data();\n        request.id = item.id;\n        bloodRequests.push(request);\n    });\n    dispatch({\n        type: 'FETCH_REQUEST',\n        data: bloodRequests\n    });\n  }) \n}\n\nexport const fetchRequestByBloodType = (bloodType) => dispatch => {\n  const bloodRequests = [];\n  firebase.firestore().collection('Request_User').where('bloodType', '==', bloodType).get()\n  .then(snapshot => {\n    snapshot.docs.forEach( item => {\n      const request = item.data();\n      request.id = item.id;\n      bloodRequests.push(request);\n    });\n\n    dispatch({\n      type: 'FETCH_ALL_REQUEST',\n      data: bloodRequests\n    });\n\n  });\n}\n\nexport const fetchRequestByUID = (uid) => dispatch => {\n  firebase.firestore().collection('Request_User').where('uid', '==', uid).get()\n  .then(snapshot => {\n    snapshot.docs.forEach( item => {\n      const request = item.data();\n      dispatch({\n        type: 'FETCH_REQUEST_BY_UID',\n        data: request\n      });\n    });   \n  });\n}\n\nexport const insertBloodRequest = (bloodRequest) => dispatch => { \n      \n    firebase.firestore().collection('Request_User').add(bloodRequest)\n    .then( (data) => {\n      bloodRequest.id = data.id;\n      dispatch({\n        type: 'ADD_NEW_BLOOD_REQUEST',\n        data : bloodRequest\n      });\n    });\n\n  };\n\nexport const insertDonorList = (request_id, user_id, userData) => dispatch => {\n  firebase.firestore().collection('Request_User').doc(request_id).collection('Donor').doc(user_id).set(userData)\n  .then( (data) => {\n    console.log(data)\n    dispatch({\n      type: 'ADD_DONOR_LIST',\n      data: userData\n    })\n  })\n}\n\nexport const fetchByUID = (uid) => dispatch => {\n  firebase.firestore().collection('Request_User').where('uid', '==', uid).get()\n  .then(snapshot => {\n    const request = snapshot.docs;\n    dispatch({\n      type: 'FETCH_REQUEST_BY_UID',\n      data: request\n    });\n\n  });\n}\n\nexport const fetchDonorList = (request_id) => dispatch => {\n  const donors = [];\n  firebase.firestore().collection('Request_User').doc(request_id).collection('Donor').get()\n  .then( subCollectionDocs => {\n      subCollectionDocs.docs.forEach( doc => {\n          const donor_id = doc.id;\n          const donor = doc.data();\n          donors.push(donor);\n          \n      })\n      dispatch({\n        type: 'FETCH_DONOR_LIST',\n        data: donors\n      })\n  })\n}"]},"metadata":{},"sourceType":"module"}