{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../../presentional/RequestList';\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.fetchDonors();\n    this.props.fetchUsers();\n    const uid = this.props.currentUser.uid;\n    const donorList = this.props.donors;\n    this.state = {\n      requests: []\n    };\n    const donor = donorList.find(item => item.uid == uid);\n\n    if (donor) {\n      const users = this.props.users;\n      const user = users.find(item => item.id == uid);\n      const bloodType = user.bloodType;\n      this.props.fetchRequestByBloodType(bloodType);\n    }\n  }\n\n  render() {\n    const bloodRequests = this.props.bloodRequests;\n    const uid = this.props.currentUser.uid;\n    const users = this.props.users;\n    const user = users.find(item => item.id == uid);\n    const donorList = this.props.donors;\n    const donor = donorList.find(item => item.uid == uid);\n\n    if (this.state.requests.length == 0) {\n      const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n      getRequest.then(snapshot => {\n        const requests = [];\n        snapshot.docs.forEach(item => {\n          const request = item.data();\n          requests.push(request);\n        });\n        this.setState({\n          requests\n        });\n      });\n    }\n\n    if (this.state.requests !== undefined) {\n      var request_Arr = [];\n      this.state.requests.map((request, index) => {\n        request_Arr.push(React.createElement(RequestList, {\n          key: index,\n          request: request,\n          donorUid: donor.uid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }));\n      });\n    }\n\n    if (bloodRequests !== undefined) {\n      var request_arr = [];\n      bloodRequests.map((bloodRequest, index) => {\n        request_arr.push(React.createElement(BloodRequest, {\n          key: index,\n          bloodRequest: bloodRequest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }));\n      });\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      sm: 12,\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \" \", React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Donor Information\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(Col, {\n      md: 4,\n      sm: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Donor, {\n      user: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Requests\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, request_Arr)), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Blood Request Lists\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, request_arr)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  bloodRequests: state.bloodRequests,\n  currentUser: state.currentUser,\n  donors: state.donors,\n  users: state.users\n});\n\nconst mapDispatchToProps = {\n  fetchRequestByBloodType,\n  fetchDonors,\n  fetchUsers\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BloodRequestList);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js"],"names":["React","BrowserRouter","Router","Route","Link","Redirect","connect","fetchRequestByBloodType","fetchDonors","fetchUsers","BloodRequest","Container","Row","Col","Donor","RequestList","firebase","BloodRequestList","Component","constructor","props","uid","currentUser","donorList","donors","state","requests","donor","find","item","users","user","id","bloodType","render","bloodRequests","length","getRequest","firestore","collection","doc","get","then","snapshot","docs","forEach","request","data","push","setState","undefined","request_Arr","map","index","request_arr","bloodRequest","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as  Router, Route, Link,Redirect } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../../presentional/RequestList';\n\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n    constructor(props) {\n        super(props);  \n        this.props.fetchDonors();\n        this.props.fetchUsers();\n\n        const uid = this.props.currentUser.uid;\n        const donorList = this.props.donors;\n        this.state = { requests: [] };\n        const donor = donorList.find( item => item.uid == uid);\n        \n        if(donor){\n            const users = this.props.users;\n            const user = users.find( item => item.id == uid);\n            const bloodType = user.bloodType;   \n            this.props.fetchRequestByBloodType(bloodType);\n        }      \n              \n    }\n\n    render() {\n        const bloodRequests = this.props.bloodRequests;\n        const uid = this.props.currentUser.uid;\n        const users = this.props.users;\n        const user = users.find( item => item.id == uid);\n        const donorList = this.props.donors;     \n        const donor = donorList.find( item => item.uid == uid);\n\n        if (this.state.requests.length == 0) {\n            const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n\n            getRequest.then(snapshot => {\n                const requests = [];\n                snapshot.docs.forEach(item => {\n                    const request = item.data();\n                    requests.push(request);\n                });\n                this.setState({ requests });\n            });\n        }\n\n        if(this.state.requests !== undefined){\n            var request_Arr = [];\n          \n            this.state.requests.map((request, index) => {\n                request_Arr.push(<RequestList key={index} request={request} donorUid={donor.uid}/>);\n            });\n\n        }\n        \n        if(bloodRequests !== undefined){\n            var request_arr = [];      \n          \n            bloodRequests.map((bloodRequest, index) => {  \n                request_arr.push(<BloodRequest key={index} bloodRequest={bloodRequest} />);\n            });\n        }\n            \n        return (\n            <React.Fragment>\n                <Container>\n                    <Row>\n                        <Col md={12} sm={12} className=\"text-center\"> <h3>Donor Information</h3></Col>\n                    </Row>\n                    <Row>\n                        <Col></Col>\n                        <Col md={4} sm={8}><Donor user={user}/></Col>\n                        <Col></Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={ 12 } className=\"text-center\">\n                            <h3>Requests</h3>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                        {request_Arr}\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={ 12 } className=\"text-center\">\n                            <h3>Blood Request Lists</h3>\n                        </Col>\n                    </Row>\n\n\n                    <Row>{request_arr}</Row>\n            </Container>\n               \n                \n\n               \n               \n\n                {/* <h3>Blood Request Lists</h3>\n                <Container></Container> */}\n            </React.Fragment>\n                \n            );\n               \n    }\n}\n\nconst mapStateToProps = state => ({\n    bloodRequests: state.bloodRequests,\n    currentUser : state.currentUser,\n    donors : state.donors,\n    users : state.users\n  });\n  \nconst mapDispatchToProps = {\n    fetchRequestByBloodType,\n    fetchDonors,\n    fetchUsers\n}\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(BloodRequestList);"]},"metadata":{},"sourceType":"module"}