{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../RequestList';\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.fetchDonors();\n    this.props.fetchUsers();\n    const uid = this.props.currentUser.uid;\n    const donorList = this.props.donors;\n    this.state = {\n      requests: []\n    };\n    const donor = donorList.find(item => item.uid == uid);\n\n    if (donor) {\n      const users = this.props.users;\n      const user = users.find(item => item.id == uid);\n      const bloodType = user.bloodType;\n      this.props.fetchRequestByBloodType(bloodType);\n    }\n  }\n\n  render() {\n    const bloodRequests = this.props.bloodRequests;\n    const uid = this.props.currentUser.uid;\n    const users = this.props.users;\n    const user = users.find(item => item.id == uid);\n    const donorList = this.props.donors;\n    const donor = donorList.find(item => item.uid == uid);\n    const requests = [];\n    const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n    getRequest.then(snapshot => {\n      snapshot.docs.forEach(item => {\n        const request = item.data();\n        requests.push(request);\n      });\n      this.setState({\n        requests\n      });\n    });\n    console.log(\"user request list\", bloodRequests);\n    const request_Arr = [];\n\n    if (requests !== undefined) {\n      // console.log(request_Arr);\n      //request_Arr = requests.map((request, index) => 2);\n      console.log(\"requests\", requests);\n      console.log(typeof requests);\n\n      for (const index in requests) {\n        console.log(index, \"looping item\");\n        request_Arr.push(React.createElement(RequestList, {\n          key: index,\n          request: requests[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n      }\n\n      console.log(requests, request_Arr);\n    } // if (bloodRequests !== undefined) {\n    //     const request_arr = bloodRequests.map((bloodRequest, index) => {\n    //         return <BloodRequest key={index} bloodRequest={bloodRequest} />;\n    //     });\n    // }\n\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Donor Information\"), React.createElement(Donor, {\n      user: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Blood Requests\"), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.requests.map((item, index) => React.createElement(RequestList, {\n      key: index,\n      request: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  bloodRequests: state.bloodRequests,\n  currentUser: state.currentUser,\n  donors: state.donors,\n  users: state.users\n});\n\nconst mapDispatchToProps = {\n  fetchRequestByBloodType,\n  fetchDonors,\n  fetchUsers\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BloodRequestList);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js"],"names":["React","BrowserRouter","Router","Route","Link","Redirect","connect","fetchRequestByBloodType","fetchDonors","fetchUsers","BloodRequest","Container","Row","Donor","RequestList","firebase","BloodRequestList","Component","constructor","props","uid","currentUser","donorList","donors","state","requests","donor","find","item","users","user","id","bloodType","render","bloodRequests","getRequest","firestore","collection","doc","get","then","snapshot","docs","forEach","request","data","push","setState","console","log","request_Arr","undefined","index","map","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../RequestList';\n\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.fetchDonors();\n        this.props.fetchUsers();\n\n        const uid = this.props.currentUser.uid;\n        const donorList = this.props.donors;\n        this.state = { requests: [] };\n        const donor = donorList.find(item => item.uid == uid);\n\n        if (donor) {\n            const users = this.props.users;\n            const user = users.find(item => item.id == uid);\n            const bloodType = user.bloodType;\n            this.props.fetchRequestByBloodType(bloodType);\n        }\n\n    }\n\n    render() {\n        const bloodRequests = this.props.bloodRequests;\n        const uid = this.props.currentUser.uid;\n        const users = this.props.users;\n        const user = users.find(item => item.id == uid);\n        const donorList = this.props.donors;\n        const donor = donorList.find(item => item.uid == uid);\n\n        const requests = [];\n        const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n\n        getRequest.then(snapshot => {\n            snapshot.docs.forEach(item => {\n                const request = item.data();\n                requests.push(request);\n            });\n            this.setState({ requests });\n        })\n        console.log(\"user request list\", bloodRequests)\n\n        const request_Arr = [];\n\n        if (requests !== undefined) {\n\n            // console.log(request_Arr);\n\n            //request_Arr = requests.map((request, index) => 2);\n            console.log(\"requests\", requests)\n            console.log(typeof requests);\n\n            for (const index in requests) {\n                console.log(index, \"looping item\");\n                request_Arr.push(<RequestList key={index} request={requests[index]} />);\n            }\n            console.log(requests, request_Arr);\n        }\n\n        // if (bloodRequests !== undefined) {\n\n        //     const request_arr = bloodRequests.map((bloodRequest, index) => {\n        //         return <BloodRequest key={index} bloodRequest={bloodRequest} />;\n        //     });\n        // }\n\n        return (\n            <React.Fragment>\n                <h3>Donor Information</h3>\n                <Donor user={user} />\n\n                {/* {request_Arr} */}\n\n                <h3>Blood Requests</h3>\n                <Container><Row>{\n                    this.state.requests.map((item, index) => (\n                        <RequestList key={index} request={item} />\n                    ))\n                }</Row></Container>\n            </React.Fragment>\n\n        );\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    bloodRequests: state.bloodRequests,\n    currentUser: state.currentUser,\n    donors: state.donors,\n    users: state.users\n});\n\nconst mapDispatchToProps = {\n    fetchRequestByBloodType,\n    fetchDonors,\n    fetchUsers\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BloodRequestList);"]},"metadata":{},"sourceType":"module"}