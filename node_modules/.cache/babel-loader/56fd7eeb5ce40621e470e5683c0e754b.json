{"ast":null,"code":"import { retrieveData, storeData } from \"../utilites/localStorage\";\nimport firebase from '../utilites/firebase';\nexport const fetchUsers = () => dispatch => {\n  const users = [];\n  const getUsers = firebase.firestore().collection('User').get();\n  getUsers.then(snapshot => {\n    snapshot.docs.forEach(item => {\n      const user = item.data();\n      user.id = item.id;\n      users.push(user);\n    }); //console.log(\"Users\", users)\n\n    dispatch({\n      type: 'FETCH_USERS',\n      payload: users\n    });\n  });\n};\nexport const insertUser = (email, password) => dispatch => {\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(result => {\n    //console.log(result.user)\n    const uid = result.user.uid;\n    const newUser = {\n      bloodType: '',\n      chatRoom: '',\n      dateOfBirth: '',\n      gender: '',\n      latestDonatedDate: '',\n      location: '',\n      name: '',\n      phone: '',\n      uid: uid,\n      username: email,\n      weight: ''\n    };\n    firebase.firestore().collection('User').doc(uid).set(newUser).then(() => {\n      newUser.id = uid;\n      dispatch({\n        type: 'ADD_NEW_USER',\n        data: newUser\n      });\n    }); //successEvent();\n  }); // .catch(error => {\n  //     errorEvent(error);\n  // });\n};\nexport const registerUserEvent = (email, password, successEvent, errorEvent) => dispatch => {\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(result => {\n    console.log(result.user);\n    dispatch({\n      type: 'LOGIN',\n      data: result.user\n    });\n    successEvent();\n  }).catch(error => {\n    errorEvent(error);\n  });\n};\nexport const loginUserEvent = (email, password, successEvent, errorEvent) => dispatch => {\n  firebase.auth().signInWithEmailAndPassword(email, password).then(data => {\n    //console.log(data.user);\n    dispatch({\n      type: \"LOGIN\",\n      user: data.user\n    });\n    successEvent();\n  }).catch(error => {\n    errorEvent(error);\n  });\n};\nexport const updateUser = (user, user_id) => dispatch => {\n  firebase.firestore().collection('User').doc(user_id).update(user).then(data => {\n    dispatch({\n      type: 'UPDATE_USER',\n      user: user\n    });\n  });\n};","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/actions/userActions.js"],"names":["retrieveData","storeData","firebase","fetchUsers","dispatch","users","getUsers","firestore","collection","get","then","snapshot","docs","forEach","item","user","data","id","push","type","payload","insertUser","email","password","auth","createUserWithEmailAndPassword","result","uid","newUser","bloodType","chatRoom","dateOfBirth","gender","latestDonatedDate","location","name","phone","username","weight","doc","set","registerUserEvent","successEvent","errorEvent","console","log","catch","error","loginUserEvent","signInWithEmailAndPassword","updateUser","user_id","update"],"mappings":"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","sourcesContent":["import {retrieveData,storeData} from \"../utilites/localStorage\";\nimport firebase from '../utilites/firebase';\n\nexport const fetchUsers = () => dispatch => {\n    const users = [];\n    const getUsers = firebase.firestore().collection('User').get();\n\n    getUsers.then( (snapshot) => {\n        snapshot.docs.forEach( item => {\n            const user = item.data();\n            user.id = item.id;\n            users.push(user);\n        });\n        //console.log(\"Users\", users)\n        dispatch({\n            type: 'FETCH_USERS',\n            payload: users\n        });\n    }) \n};\n\nexport const insertUser = (email, password) => dispatch => {\n\n    firebase.auth().createUserWithEmailAndPassword(email, password)\n    .then( result => {\n        //console.log(result.user)\n        const uid = result.user.uid;\n\n        const newUser = {\n            bloodType: '',\n            chatRoom: '',\n            dateOfBirth: '',\n            gender: '',\n            latestDonatedDate: '',\n            location: '',\n            name: '',\n            phone: '',\n            uid: uid,\n            username: email,\n            weight: '',\n        }\n\n        firebase.firestore().collection('User').doc(uid).set(newUser)\n        .then( () => {\n            newUser.id = uid;\n            dispatch({\n                type: 'ADD_NEW_USER',\n                data : newUser\n            });\n        });\n\n        //successEvent();\n    })\n    // .catch(error => {\n    //     errorEvent(error);\n    // });\n\n};\n\nexport const registerUserEvent = (email, password, successEvent, errorEvent) => dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password)\n    .then( result => {\n        console.log(result.user)\n        dispatch({\n            type: 'LOGIN',\n            data : result.user\n        });\n\n        successEvent();\n    })\n    .catch(error => {\n        errorEvent(error);\n    });\n};\n  \n\nexport const loginUserEvent = (\n    email,\n    password,\n    successEvent,\n    errorEvent\n    ) => dispatch => {\n    firebase.auth()\n        .signInWithEmailAndPassword(email, password)\n        .then(data => {\n            //console.log(data.user);\n            dispatch({\n            type: \"LOGIN\",\n            user: data.user\n            });\n            successEvent();\n        })\n        .catch(error => {\n            errorEvent(error);\n        });\n    }\n  \n\nexport const updateUser = (user, user_id) => dispatch => {\n    \n    firebase.firestore().collection('User').doc(user_id)\n    .update(user)\n    .then( (data) => {\n        dispatch({\n            type: 'UPDATE_USER',\n            user: user\n        })\n    })\n  }"]},"metadata":{},"sourceType":"module"}