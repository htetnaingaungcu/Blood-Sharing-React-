{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../RequestList';\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.fetchDonors();\n    this.props.fetchUsers();\n    const uid = this.props.currentUser.uid;\n    const donorList = this.props.donors;\n    const donor = donorList.find(item => item.uid == uid);\n\n    if (donor) {\n      const users = this.props.users;\n      const user = users.find(item => item.id == uid);\n      const bloodType = user.bloodType;\n      this.props.fetchRequestByBloodType(bloodType);\n    }\n  }\n\n  render() {\n    const bloodRequests = this.props.bloodRequests;\n    const uid = this.props.currentUser.uid;\n    const users = this.props.users;\n    const user = users.find(item => item.id == uid);\n    const donorList = this.props.donors;\n    const donor = donorList.find(item => item.uid == uid);\n    const requests = [];\n    const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n    getRequest.then(snapshot => {\n      snapshot.docs.forEach(item => {\n        const request = item.data();\n        requests.push(request);\n      });\n    });\n    console.log(\"user request list\", bloodRequests);\n    console.log(\"requests\", requests);\n    var request_Arr = [];\n\n    if (requests !== undefined) {\n      console.log(request_Arr);\n      requests.map((request, index) => {\n        // console.log(request_Arr);\n        request_Arr.push(React.createElement(RequestList, {\n          key: index,\n          request: request,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }));\n      });\n    }\n\n    if (bloodRequests !== undefined) {\n      var request_arr = [];\n      bloodRequests.map((bloodRequest, index) => {\n        console.log(request_arr.length);\n        request_arr.push(React.createElement(BloodRequest, {\n          key: index,\n          bloodRequest: bloodRequest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }));\n      });\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Donor Information\"), React.createElement(Donor, {\n      user: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Blood Requests\"), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, request_arr)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  bloodRequests: state.bloodRequests,\n  currentUser: state.currentUser,\n  donors: state.donors,\n  users: state.users\n});\n\nconst mapDispatchToProps = {\n  fetchRequestByBloodType,\n  fetchDonors,\n  fetchUsers\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BloodRequestList);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/container/BloodRequestList/BloodRequestList.js"],"names":["React","BrowserRouter","Router","Route","Link","Redirect","connect","fetchRequestByBloodType","fetchDonors","fetchUsers","BloodRequest","Container","Row","Donor","RequestList","firebase","BloodRequestList","Component","constructor","props","uid","currentUser","donorList","donors","donor","find","item","users","user","id","bloodType","render","bloodRequests","requests","getRequest","firestore","collection","doc","get","then","snapshot","docs","forEach","request","data","push","console","log","request_Arr","undefined","map","index","request_arr","bloodRequest","length","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as  Router, Route, Link,Redirect } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\nimport { fetchRequestByBloodType } from '../../../actions/bloodRequestActions';\nimport { fetchDonors } from '../../../actions/donorActions';\nimport { fetchUsers } from '../../../actions/userActions';\nimport BloodRequest from \"../BloodRequest\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Donor from \"../../presentional/Donor\";\nimport RequestList from '../RequestList';\n\nimport firebase from '../../../utilites/firebase';\n\nclass BloodRequestList extends React.Component {\n    constructor(props) {\n        super(props);  \n        this.props.fetchDonors();\n        this.props.fetchUsers();\n\n        const uid = this.props.currentUser.uid;\n        const donorList = this.props.donors;\n        \n        const donor = donorList.find( item => item.uid == uid);\n        \n        if(donor){\n            const users = this.props.users;\n            const user = users.find( item => item.id == uid);\n            const bloodType = user.bloodType;   \n            this.props.fetchRequestByBloodType(bloodType);\n        }      \n              \n    }\n\n    render() {\n        const bloodRequests = this.props.bloodRequests;\n        const uid = this.props.currentUser.uid;\n        const users = this.props.users;\n        const user = users.find( item => item.id == uid);\n        const donorList = this.props.donors;     \n        const donor = donorList.find( item => item.uid == uid);\n\n        const requests = [];\n        const getRequest = firebase.firestore().collection('Donor').doc(donor.id).collection('Request_User').get();\n\n        getRequest.then( snapshot => {\n            snapshot.docs.forEach( item => {\n                const request = item.data();                \n                requests.push(request);                       \n            })\n        })\n        console.log(\"user request list\", bloodRequests)\n        console.log(\"requests\" , requests)\n        var request_Arr = [];\n        if(requests !== undefined){\n            \n            console.log(request_Arr);\n          \n            requests.map((request, index) => {\n                // console.log(request_Arr);\n                request_Arr.push(<RequestList key={index} request={request} />);\n            });\n\n        }\n        \n        if(bloodRequests !== undefined){\n            var request_arr = [];\n\n            \n          \n            bloodRequests.map((bloodRequest, index) => {  \n                console.log(request_arr.length);        \n                request_arr.push(<BloodRequest key={index} bloodRequest={bloodRequest} />);\n            });\n        }\n            \n        return (\n            <React.Fragment>\n                <Container>\n                    \n                </Container>\n                <h3>Donor Information</h3>\n                <Donor user={user}/>\n\n                {/* {request_Arr} */}\n\n                <h3>Blood Requests</h3>\n                <Container><Row>{request_arr}</Row></Container>\n            </React.Fragment>\n                \n            );\n               \n    }\n}\n\nconst mapStateToProps = state => ({\n    bloodRequests: state.bloodRequests,\n    currentUser : state.currentUser,\n    donors : state.donors,\n    users : state.users\n  });\n  \nconst mapDispatchToProps = {\n    fetchRequestByBloodType,\n    fetchDonors,\n    fetchUsers\n}\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(BloodRequestList);"]},"metadata":{},"sourceType":"module"}