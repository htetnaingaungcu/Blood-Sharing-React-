{"ast":null,"code":"var _jsxFileName = \"/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/RegisterForm/RegisterForm.js\";\nimport React from \"react\";\nimport { BrowserRouter as Redirect, Router, Route, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { insertUser } from \"../../actions/userActions\";\n\nclass RegisterForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnSubmit = event => {\n      event.preventDefault();\n\n      if (this.password.current.value === this.confirm_password.current.value) {\n        this.props.insertUser({\n          username: this.username.current.value,\n          password: this.password.current.value\n        }, () => {\n          this.setState({\n            completeRegister: true\n          });\n        });\n      } else {\n        alert(\"No valid password and confirm password\");\n      }\n    };\n\n    this.username = React.createRef();\n    this.password = React.createRef();\n    this.confirm_password = React.createRef();\n    this.state = {\n      completeRegister: false\n    };\n  }\n\n  render() {\n    console.log(this.state.completeRegister);\n    if (this.state.completeRegister) return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n    return React.createElement(\"form\", {\n      onSubmit: this.handleOnSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Username : \"), React.createElement(\"input\", {\n      id: \"username\",\n      ref: this.username,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Password : \"), React.createElement(\"input\", {\n      type: \"password\",\n      ref: this.password,\n      required: true,\n      id: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"confirm_password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Confirm Password : \"), React.createElement(\"input\", {\n      type: \"password\",\n      ref: this.confirm_password,\n      required: true,\n      id: \"confirm_password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Register\"));\n  }\n\n}\n\nconst mapDispatchToProps = {\n  insertUser\n};\nexport default connect(null, mapDispatchToProps)(RegisterForm);","map":{"version":3,"sources":["/media/htet/13d0eda8-9d9f-4341-9c22-cd0d2676df10/PADC Project/PADC7-FP-BloodSharing-Web/blood-sharing/src/components/RegisterForm/RegisterForm.js"],"names":["React","BrowserRouter","Redirect","Router","Route","Link","connect","insertUser","RegisterForm","Component","constructor","props","handleOnSubmit","event","preventDefault","password","current","value","confirm_password","username","setState","completeRegister","alert","createRef","state","render","console","log","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Redirect, Router, Route, Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { insertUser } from \"../../actions/userActions\";\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.username = React.createRef();\n        this.password = React.createRef();\n        this.confirm_password = React.createRef();\n\n        this.state = {\n            completeRegister: false\n        };\n    }\n\n    handleOnSubmit = event => {\n        event.preventDefault();\n        if (this.password.current.value === this.confirm_password.current.value) {\n\n            this.props.insertUser(\n                {\n                    username: this.username.current.value,\n                    password: this.password.current.value\n                },\n                () => {\n                    this.setState({\n                      completeRegister: true\n                    });\n                  }\n            );\n        } \n        else {\n\t\t\talert(\"No valid password and confirm password\");\n\t\t} \n    };\n\n    render() {\n        console.log(this.state.completeRegister);\n        if (this.state.completeRegister) return <Redirect to=\"/\" />;\n\n        return (\n            <form onSubmit={this.handleOnSubmit}>\n                <label htmlFor=\"username\">Username : </label>\n                <input id=\"username\" ref={this.username} required />\n                <br />\n                <label htmlFor=\"password\">Password : </label>\n                <input type=\"password\" ref={this.password} required id=\"password\" />\n                <br />\n                <label htmlFor=\"confirm_password\">Confirm Password : </label>\n                <input\n                type=\"password\"\n                ref={this.confirm_password}\n                required\n                id=\"confirm_password\"\n                />\n                <br />\n                <button type=\"submit\">Register</button>\n            </form>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    insertUser\n}\n\nexport default connect(null, mapDispatchToProps)(RegisterForm);"]},"metadata":{},"sourceType":"module"}